{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled9.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UmyLE6-vlOrH",
        "colab_type": "text"
      },
      "source": [
        "# SVM for telegram text classifiation\n",
        "using: https://github.com/Stratomaker/libsvm\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AIOkoI9Zl2oV",
        "colab_type": "text"
      },
      "source": [
        "1. cloning git repo and installing dependencies"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XtBFX6hWlYsJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "6c287b9e-eddb-4637-eca4-f90e12710c70"
      },
      "source": [
        "!git clone https://github.com/Stratomaker/libsvm.git\n"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'libsvm'...\n",
            "remote: Enumerating objects: 5, done.\u001b[K\n",
            "remote: Counting objects:  20% (1/5)\u001b[K\rremote: Counting objects:  40% (2/5)\u001b[K\rremote: Counting objects:  60% (3/5)\u001b[K\rremote: Counting objects:  80% (4/5)\u001b[K\rremote: Counting objects: 100% (5/5)\u001b[K\rremote: Counting objects: 100% (5/5), done.\u001b[K\n",
            "remote: Compressing objects:  20% (1/5)\u001b[K\rremote: Compressing objects:  40% (2/5)\u001b[K\rremote: Compressing objects:  60% (3/5)\u001b[K\rremote: Compressing objects:  80% (4/5)\u001b[K\rremote: Compressing objects: 100% (5/5)\u001b[K\rremote: Compressing objects: 100% (5/5), done.\u001b[K\n",
            "Receiving objects:   0% (1/3773)   \rReceiving objects:   1% (38/3773)   \rReceiving objects:   2% (76/3773)   \rReceiving objects:   3% (114/3773)   \rReceiving objects:   4% (151/3773)   \rReceiving objects:   5% (189/3773)   \rReceiving objects:   6% (227/3773)   \rReceiving objects:   7% (265/3773)   \rReceiving objects:   8% (302/3773)   \rReceiving objects:   9% (340/3773)   \rReceiving objects:  10% (378/3773)   \rReceiving objects:  11% (416/3773)   \rReceiving objects:  12% (453/3773)   \rReceiving objects:  13% (491/3773)   \rReceiving objects:  14% (529/3773)   \rReceiving objects:  15% (566/3773)   \rReceiving objects:  16% (604/3773)   \rReceiving objects:  17% (642/3773)   \rReceiving objects:  18% (680/3773)   \rReceiving objects:  19% (717/3773)   \rReceiving objects:  20% (755/3773)   \rReceiving objects:  21% (793/3773)   \rReceiving objects:  22% (831/3773)   \rReceiving objects:  23% (868/3773)   \rReceiving objects:  24% (906/3773)   \rReceiving objects:  25% (944/3773)   \rReceiving objects:  26% (981/3773)   \rReceiving objects:  27% (1019/3773)   \rReceiving objects:  28% (1057/3773)   \rReceiving objects:  29% (1095/3773)   \rReceiving objects:  30% (1132/3773)   \rReceiving objects:  31% (1170/3773)   \rReceiving objects:  32% (1208/3773)   \rReceiving objects:  33% (1246/3773)   \rReceiving objects:  34% (1283/3773)   \rReceiving objects:  35% (1321/3773)   \rReceiving objects:  36% (1359/3773)   \rReceiving objects:  37% (1397/3773)   \rReceiving objects:  38% (1434/3773)   \rReceiving objects:  39% (1472/3773)   \rReceiving objects:  40% (1510/3773)   \rReceiving objects:  41% (1547/3773)   \rReceiving objects:  42% (1585/3773)   \rReceiving objects:  43% (1623/3773)   \rReceiving objects:  44% (1661/3773)   \rReceiving objects:  45% (1698/3773)   \rReceiving objects:  46% (1736/3773)   \rReceiving objects:  47% (1774/3773)   \rReceiving objects:  48% (1812/3773)   \rReceiving objects:  49% (1849/3773)   \rReceiving objects:  50% (1887/3773)   \rReceiving objects:  51% (1925/3773)   \rReceiving objects:  52% (1962/3773)   \rReceiving objects:  53% (2000/3773)   \rReceiving objects:  54% (2038/3773)   \rReceiving objects:  55% (2076/3773)   \rReceiving objects:  56% (2113/3773)   \rReceiving objects:  57% (2151/3773)   \rReceiving objects:  58% (2189/3773)   \rReceiving objects:  59% (2227/3773)   \rReceiving objects:  60% (2264/3773)   \rReceiving objects:  61% (2302/3773)   \rReceiving objects:  62% (2340/3773)   \rReceiving objects:  63% (2377/3773)   \rReceiving objects:  64% (2415/3773)   \rReceiving objects:  65% (2453/3773)   \rReceiving objects:  66% (2491/3773)   \rReceiving objects:  67% (2528/3773)   \rReceiving objects:  68% (2566/3773)   \rReceiving objects:  69% (2604/3773)   \rReceiving objects:  70% (2642/3773)   \rReceiving objects:  71% (2679/3773)   \rReceiving objects:  72% (2717/3773)   \rReceiving objects:  73% (2755/3773)   \rReceiving objects:  74% (2793/3773)   \rReceiving objects:  75% (2830/3773)   \rReceiving objects:  76% (2868/3773)   \rReceiving objects:  77% (2906/3773)   \rReceiving objects:  78% (2943/3773)   \rReceiving objects:  79% (2981/3773)   \rReceiving objects:  80% (3019/3773)   \rReceiving objects:  81% (3057/3773)   \rReceiving objects:  82% (3094/3773)   \rReceiving objects:  83% (3132/3773)   \rReceiving objects:  84% (3170/3773)   \rReceiving objects:  85% (3208/3773)   \rReceiving objects:  86% (3245/3773)   \rReceiving objects:  87% (3283/3773)   \rReceiving objects:  88% (3321/3773)   \rReceiving objects:  89% (3358/3773)   \rReceiving objects:  90% (3396/3773)   \rReceiving objects:  91% (3434/3773)   \rReceiving objects:  92% (3472/3773)   \rReceiving objects:  93% (3509/3773)   \rReceiving objects:  94% (3547/3773)   \rReceiving objects:  95% (3585/3773)   \rReceiving objects:  96% (3623/3773)   \rReceiving objects:  97% (3660/3773)   \rReceiving objects:  98% (3698/3773)   \rReceiving objects:  99% (3736/3773)   \rremote: Total 3773 (delta 0), reused 0 (delta 0), pack-reused 3768\u001b[K\n",
            "Receiving objects: 100% (3773/3773), 7.24 MiB | 25.29 MiB/s, done.\n",
            "Resolving deltas: 100% (2059/2059), done.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PqBdUtXlldAM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "56898251-c369-4493-d686-44fbafe28d38"
      },
      "source": [
        "%cd libsvm/\n",
        "!make"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Errno 2] No such file or directory: 'libsvm/'\n",
            "/content/libsvm\n",
            "g++ -Wall -Wconversion -O3 -fPIC svm-train.c svm.o -o svm-train -lm\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AxqBmSH_yV0u",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "37ac08aa-251b-44d8-87e0-87f6e102a044"
      },
      "source": [
        "!apt-get install gnuplot"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-440\n",
            "Use 'apt autoremove' to remove it.\n",
            "The following additional packages will be installed:\n",
            "  aglfn gnuplot-data gnuplot-qt liblua5.3-0 libnotify4 libqt5svg5\n",
            "  libwxbase3.0-0v5 libwxgtk3.0-0v5 notification-daemon\n",
            "Suggested packages:\n",
            "  gnuplot-doc\n",
            "The following NEW packages will be installed:\n",
            "  aglfn gnuplot gnuplot-data gnuplot-qt liblua5.3-0 libnotify4 libqt5svg5\n",
            "  libwxbase3.0-0v5 libwxgtk3.0-0v5 notification-daemon\n",
            "0 upgraded, 10 newly installed, 0 to remove and 33 not upgraded.\n",
            "Need to get 6,535 kB of archives.\n",
            "After this operation, 24.7 MB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/main amd64 libqt5svg5 amd64 5.9.5-0ubuntu1 [128 kB]\n",
            "Get:2 http://archive.ubuntu.com/ubuntu bionic/universe amd64 aglfn all 1.7-3 [29.4 kB]\n",
            "Get:3 http://archive.ubuntu.com/ubuntu bionic/universe amd64 gnuplot-data all 5.2.2+dfsg1-2ubuntu1 [56.7 kB]\n",
            "Get:4 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 liblua5.3-0 amd64 5.3.3-1ubuntu0.18.04.1 [115 kB]\n",
            "Get:5 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libwxbase3.0-0v5 amd64 3.0.4+dfsg-3 [954 kB]\n",
            "Get:6 http://archive.ubuntu.com/ubuntu bionic/main amd64 libnotify4 amd64 0.7.7-3 [17.3 kB]\n",
            "Get:7 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libwxgtk3.0-0v5 amd64 3.0.4+dfsg-3 [4,182 kB]\n",
            "Get:8 http://archive.ubuntu.com/ubuntu bionic/universe amd64 gnuplot-qt amd64 5.2.2+dfsg1-2ubuntu1 [1,013 kB]\n",
            "Get:9 http://archive.ubuntu.com/ubuntu bionic/universe amd64 gnuplot all 5.2.2+dfsg1-2ubuntu1 [3,816 B]\n",
            "Get:10 http://archive.ubuntu.com/ubuntu bionic/main amd64 notification-daemon amd64 3.20.0-3 [36.9 kB]\n",
            "Fetched 6,535 kB in 1s (6,064 kB/s)\n",
            "Selecting previously unselected package libqt5svg5:amd64.\n",
            "(Reading database ... 144379 files and directories currently installed.)\n",
            "Preparing to unpack .../0-libqt5svg5_5.9.5-0ubuntu1_amd64.deb ...\n",
            "Unpacking libqt5svg5:amd64 (5.9.5-0ubuntu1) ...\n",
            "Selecting previously unselected package aglfn.\n",
            "Preparing to unpack .../1-aglfn_1.7-3_all.deb ...\n",
            "Unpacking aglfn (1.7-3) ...\n",
            "Selecting previously unselected package gnuplot-data.\n",
            "Preparing to unpack .../2-gnuplot-data_5.2.2+dfsg1-2ubuntu1_all.deb ...\n",
            "Unpacking gnuplot-data (5.2.2+dfsg1-2ubuntu1) ...\n",
            "Selecting previously unselected package liblua5.3-0:amd64.\n",
            "Preparing to unpack .../3-liblua5.3-0_5.3.3-1ubuntu0.18.04.1_amd64.deb ...\n",
            "Unpacking liblua5.3-0:amd64 (5.3.3-1ubuntu0.18.04.1) ...\n",
            "Selecting previously unselected package libwxbase3.0-0v5:amd64.\n",
            "Preparing to unpack .../4-libwxbase3.0-0v5_3.0.4+dfsg-3_amd64.deb ...\n",
            "Unpacking libwxbase3.0-0v5:amd64 (3.0.4+dfsg-3) ...\n",
            "Selecting previously unselected package libnotify4:amd64.\n",
            "Preparing to unpack .../5-libnotify4_0.7.7-3_amd64.deb ...\n",
            "Unpacking libnotify4:amd64 (0.7.7-3) ...\n",
            "Selecting previously unselected package libwxgtk3.0-0v5:amd64.\n",
            "Preparing to unpack .../6-libwxgtk3.0-0v5_3.0.4+dfsg-3_amd64.deb ...\n",
            "Unpacking libwxgtk3.0-0v5:amd64 (3.0.4+dfsg-3) ...\n",
            "Selecting previously unselected package gnuplot-qt.\n",
            "Preparing to unpack .../7-gnuplot-qt_5.2.2+dfsg1-2ubuntu1_amd64.deb ...\n",
            "Unpacking gnuplot-qt (5.2.2+dfsg1-2ubuntu1) ...\n",
            "Selecting previously unselected package gnuplot.\n",
            "Preparing to unpack .../8-gnuplot_5.2.2+dfsg1-2ubuntu1_all.deb ...\n",
            "Unpacking gnuplot (5.2.2+dfsg1-2ubuntu1) ...\n",
            "Selecting previously unselected package notification-daemon.\n",
            "Preparing to unpack .../9-notification-daemon_3.20.0-3_amd64.deb ...\n",
            "Unpacking notification-daemon (3.20.0-3) ...\n",
            "Setting up libnotify4:amd64 (0.7.7-3) ...\n",
            "Setting up libwxbase3.0-0v5:amd64 (3.0.4+dfsg-3) ...\n",
            "Setting up libqt5svg5:amd64 (5.9.5-0ubuntu1) ...\n",
            "Setting up aglfn (1.7-3) ...\n",
            "Setting up liblua5.3-0:amd64 (5.3.3-1ubuntu0.18.04.1) ...\n",
            "Setting up notification-daemon (3.20.0-3) ...\n",
            "Setting up libwxgtk3.0-0v5:amd64 (3.0.4+dfsg-3) ...\n",
            "Setting up gnuplot-data (5.2.2+dfsg1-2ubuntu1) ...\n",
            "Setting up gnuplot-qt (5.2.2+dfsg1-2ubuntu1) ...\n",
            "update-alternatives: using /usr/bin/gnuplot-qt to provide /usr/bin/gnuplot (gnuplot) in auto mode\n",
            "Setting up gnuplot (5.2.2+dfsg1-2ubuntu1) ...\n",
            "Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n",
            "Processing triggers for mime-support (3.60ubuntu1) ...\n",
            "Processing triggers for libc-bin (2.27-3ubuntu1) ...\n",
            "/sbin/ldconfig.real: /usr/local/lib/python3.6/dist-packages/ideep4py/lib/libmkldnn.so.0 is not a symbolic link\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WDBJedCeoFhh",
        "colab_type": "text"
      },
      "source": [
        "lets say that \"interesting\" post is labeled with +1 while \"usual\" with -1. First parameter defines the index of the word from the vocabulary(u also need to create one for ur use case) the second parameter describes some numeric characteristic of the word. It can be absolute(чисто количество в конкретном посте) it can be relative(number of specific word per post/overall number of words in post). For the training set I've chosen absolute. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nrimy3NgwOXH",
        "colab_type": "text"
      },
      "source": [
        "2. Next you can create some subset if your training dataset is really large"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "joJoRXnxwU4g",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!python subset.py telega_train 100 output_file second_output_file"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KIeuiFVgwefh",
        "colab_type": "text"
      },
      "source": [
        "3. searching for best parameters using cross-validation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "leQ5Fbozv6fV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 969
        },
        "outputId": "eb7fdd3e-47d3-4152-adb1-ea50493ec399"
      },
      "source": [
        "%cd libsvm/\n",
        "!python grid.py -log2c -5,5,1 -log2g -4,0,1 -v 5 -m 20 telega_train"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[local] 0.0 -2.0 30.0 (best c=1.0, g=0.25, rate=30.0)\n",
            "[local] -3.0 -2.0 30.0 (best c=0.125, g=0.25, rate=30.0)\n",
            "[local] 3.0 -2.0 30.0 (best c=0.125, g=0.25, rate=30.0)\n",
            "[local] 0.0 -3.0 25.0 (best c=0.125, g=0.25, rate=30.0)\n",
            "[local] -3.0 -3.0 30.0 (best c=0.125, g=0.25, rate=30.0)\n",
            "[local] 3.0 -3.0 30.0 (best c=0.125, g=0.25, rate=30.0)\n",
            "[local] -4.0 -2.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -4.0 -3.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 2.0 -2.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 2.0 -3.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 0.0 0.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -3.0 0.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 3.0 0.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -4.0 0.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 2.0 0.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -1.0 -2.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -1.0 -3.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -1.0 0.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 5.0 -2.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 5.0 -3.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 5.0 0.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 0.0 -4.0 25.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -3.0 -4.0 25.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 3.0 -4.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -4.0 -4.0 25.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 2.0 -4.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -1.0 -4.0 25.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] 5.0 -4.0 30.0 (best c=0.0625, g=0.25, rate=30.0)\n",
            "[local] -5.0 -2.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] -5.0 -3.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] -5.0 0.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] -5.0 -4.0 25.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] 1.0 -2.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] 1.0 -3.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] 1.0 0.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] 1.0 -4.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] 0.0 -1.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] -3.0 -1.0 30.0 (best c=0.03125, g=0.25, rate=30.0)\n",
            "[local] 3.0 -1.0 40.0 (best c=8.0, g=0.5, rate=40.0)\n",
            "[local] -4.0 -1.0 30.0 (best c=8.0, g=0.5, rate=40.0)\n",
            "[local] 2.0 -1.0 40.0 (best c=4.0, g=0.5, rate=40.0)\n",
            "[local] -1.0 -1.0 30.0 (best c=4.0, g=0.5, rate=40.0)\n",
            "[local] 5.0 -1.0 40.0 (best c=4.0, g=0.5, rate=40.0)\n",
            "[local] -5.0 -1.0 30.0 (best c=4.0, g=0.5, rate=40.0)\n",
            "[local] 1.0 -1.0 40.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] -2.0 -2.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] -2.0 -3.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] -2.0 0.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] -2.0 -4.0 25.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] -2.0 -1.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] 4.0 -2.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] 4.0 -3.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] 4.0 0.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] 4.0 -4.0 30.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "[local] 4.0 -1.0 40.0 (best c=2.0, g=0.5, rate=40.0)\n",
            "2.0 0.5 40.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QWtWrHn4FTbc",
        "colab_type": "text"
      },
      "source": [
        "чекаем пикчу распределенния оптимальных параметров g and c"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "guRmCl9tC7ko",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "e18b0120-1c8b-477f-ca35-09d97c60e1c1"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "img=mpimg.imread('telega_train.png')\n",
        "imgplot = plt.imshow(img)\n",
        "plt.show()"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OO_isFMp1754",
        "colab_type": "text"
      },
      "source": [
        "4. now we can train our SVM with estimated parameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EwdulGTUwumR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "d823a12d-ab68-43d6-b802-8040b545bfba"
      },
      "source": [
        "!./svm-train -s 0 -t 2.0 -g 0.5 -c 2.0 -e 0.001 tools/telega_train"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "*\n",
            "optimization finished, #iter = 10\n",
            "nu = 0.500562\n",
            "obj = -10.011234, rho = 0.000000\n",
            "nSV = 20, nBSV = 0\n",
            "Total nSV = 20\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OHIC_h_c4kay",
        "colab_type": "text"
      },
      "source": [
        "5. finally we can run our trained model "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yz-hrH-_ESNL",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V6lJBxA82RoV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "95fc73d2-8848-4ede-8695-3b39c7fc8afe"
      },
      "source": [
        "!./svm-predict -b 0 tools/telega_test.txt telega_train.model telega_output.txt"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy = 0% (0/1) (classification)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2-18V-ZxD1V2",
        "colab_type": "text"
      },
      "source": [
        "Accuracy = 0% means that the prewritten in the test set class was wrong (I have set it to +1 but the model predicted -1). The predicted class is written in telega_output.txt"
      ]
    }
  ]
}